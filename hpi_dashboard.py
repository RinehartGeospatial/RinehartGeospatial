# -*- coding: utf-8 -*-
"""HPI_Dashboard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jF3NS4szvLCNQejsCgC7tDerqbAxQEks

# **Healthy Places Index 3.0 and Alcohol Outlet Dashboard**

##<u>**Purpose**</u>
<p align = "justify">This dashboard is meant to serve as an interactive method of data provided by the Public Health Alliance of Southern California in their [Healthy Places Index (HPI)](https://www.healthyplacesindex.org) and associated indicators of community characteristics (Public Health Alliance of Southern California, 2022). HPI indicators consist of metrics related to economic, educational, social, transportation, neighborhood, housing, environmental, demographic, healthcare, and health facets of the populations and regions analyzed. An HPI map interface already exists and can be visited using [this link](https://map.healthyplacesindex.org). This dashboard is meant to facilitate the analysis of HPI data in conjunction with alcohol outlet data in Los Angeles County Census Tracts.</p>

<p align = "justify">It is well understood that alcohol availability negatively impacts both the individual and the community. At the individual level, alcohol use and availability primarily impact health and safety by increasing rates of chronic diseases, congenital disabilities, and injuries (Centers for Disease Control and Prevention, 2022; Fone et al., 2016; Gruenewald et al., 2002; Pollack et al., 2005; Snedker & Herting, 2008). At the community level, an increase in alcohol use and availability correlates to increased crime rates, reduces community health, and attracts undesirable gatherings under the assortative drinking theory (Foster et al., 2017; Horsefield et al., 2023; Lipton et al., 2013; Tabb et al., 2018; Trangenstein et al., 2020). The association between alcohol outlets and the indicators included in the HPI warrant further analysis of the data alongside outlet data.</p>

##<u>**Data**</u>
<p align = "justify">The HPI 3.0 data for this dashboard was obtained via email correspondence with the Climate Change and Health Data Lead of the Public Health Alliance of Southern California (Bodenreider, 2023). The alcohol outlet data was obtained from the California Alcoholic Beverage Control (2022) website and geocoded using ArcGIS Pro.</p> 

##<u>**Functionality**</u>
<p align = "justify">The dashboard comprises five tabs: the Scatterplot, Kernel Density (KDE) Map, Choropleth Map, Regression Plot, and Interactive Map (Folium) Tabs. The dashboard's design intends to facilitate easy and efficient analysis without rerunning the code to evaluate different metrics. In alignment with the goals of the dashboard, all tabs contain dropdown menus and buttons to initiate the generation of outputs. The interactive map tab also hosts text input boxes.</p>

#####**Scatterplot Tab**
><p align = "justify">The Scatterplot Tab hosts two dropdown menus containing the HPI indicators and a generation button. Users can view all potential variable options, make their selections and then use the generate button to initiate plot drawing. The purpose behind the generation button is to avoid continuous redrawing of the plot each time a user selects a new indicator in one dropdown. The generation button links to the Regression Plot Tab so that as the scatterplot updates, the regression plot will as well for ease of analysis. The scatterplot tab displays the observations of the selected variables within the plot. Observations are colored based on their alcohol outlet count value.</p>

#####**KDE Map Tab**
><p align = "justify">The Kernel Density (KDE) Map tab hosts one dropdown menu containing the various alcohol outlet type options: Bars (On-Site Consumption), Restaurants (On-Site Consumption), Beer & Wine (Packaged, Off-Site Consumption), Beer, Wine, & Spirits (Packaged, Off-Site Consumption), and All Outlet Types. The user selection filters the alcohol outlet locations used in the KDE calculation, and a static map is produced within the tab. The functionality of this tab allows for ease of evaluation of the density differences of various outlet types.</p>

#####**Choropleth Map Tab**
><p align = "justify">The Choropleth Map Tab contains a dropdown for users to select an HPI indicator to evaluate via choropleth mapping. The tab also hosts a button to initiate the program's map generation using the variable selected in the dropdown menu. This tab allows users to visualize how the variable values are spatially distributed across Census tracts in Los Angeles County. </p>

#####**Regression Plot Tab**
><p align = "justify">The Regression Plot Tab contains two dropdown menus containing the HPI indicator options and the outlet count variable, as well as a button to facilitate the initiation of the plot generation. The indicator selections and generation button connect to the Scatterplot Tab to facilitate ease of viewing both forms of analysis for the variables selection while reducing redundancy of entering in variable selection in both tabs. The regression plot provides a statistical measure of the relationship between variables. The regression plot uses linear regression with a 95% confidence interval.</p> 

#####**Interactive Map Tab**
><p align = "justify">The Interactive Map Tab serves are a customizable analysis feature using Folium. The tab hosts two input text boxes for users to enter an address within Los Angeles County and specify a radius distance. The address input is geocoded and used alongside the radius distance input to obtain and display alcohol outlets within the resulting buffer. Alcohol outlets are added to the map as markers. The outlet markers are color-coded and assigned an icon and a type name for display. The tab also hosts a dropdown menu containing the HPI indicator and outlet count variables for choropleth mapping of the Los Angeles County Census tracts behind the outlets within the buffer. Popups for the outlet markers provide users with information about each outlet, including the business name, address, and license type. Tooltips for Census tracts provide information on the Census tract number, population, value of the indicator selected from the dropdown menu, and outlet count. This tab allows for the visual analysis of how outlets are distributed and how outlets relate to various indicators.</p>

**References** 

Bodenreider, C. (2023, February 13). HPI Data File Request. 

California Alcoholic Beverage Control. (2022). Licenses by County and Census Tract. https://www.abc.ca.gov/licensing/licensing-reports/licenses-by-county-and-census-tract/ 

Centers for Disease Control and Prevention. (2022). Drinking too much alcohol can harm your health. Learn the facts | CDC. Centers for Disease Control and Prevention. https://www.cdc.gov/alcohol/fact-sheets/alcohol-use.htm 

Fone, D., Morgan, J., Fry, R., Rodgers, S., Orford, S., Farewell, D., Dunstan, F., White, J., Sivarajasingam, V., Trefan, L., Brennan, I., Lee, S., Shiode, N., Weightman, A., Webster, C., & Lyons, R. (2016). Change in alcohol outlet density and alcohol-related harm to population health (CHALICE): A comprehensive record-linked database study in Wales. Public Health Research, 4(3), Article 3. https://doi.org/10.3310/phr04030  

Foster, S., Hooper, P., Knuiman, M., Trapp, G., & Wood, L. (2017). Does alcohol outlet density differ by area-level disadvantage in metropolitan Perth? Drug and Alcohol Review, 36(5), 701–708. https://doi.org/10.1111/dar.12469  

Gruenewald, P. J., Remer, L., & Lipton, R. (2002). Evaluating the Alcohol Environment: Community Geography and Alcohol Problems. Alcohol Research & Health, 26(1), 42–48. 

Horsefield, O. J., Lightowlers, C., & Green, M. A. (2023). The spatial effect of alcohol availability on violence: A geographically weighted regression analysis. Applied Geography, 150, 102824. https://doi.org/10.1016/j.apgeog.2022.102824  

Lipton, R., Yang, X., A. Braga, A., Goldstick, J., Newton, M., & Rura, M. (2013). The Geography of Violence, Alcohol Outlets, and Drug Arrests in Boston. American Journal of Public Health, 103(4), 657–664. https://doi.org/10.2105/AJPH.2012.300927  

Pollack, C. E., Cubbin, C., Ahn, D., & Winkleby, M. (2005). Neighbourhood deprivation and alcohol consumption: Does the availability of alcohol play a role? International Journal of Epidemiology, 34(4), 772–780. https://doi.org/10.1093/ije/dyi026  

Public Health Alliance of Southern California. (2022). Frequently Asked Questions. California Healthy Places Index. https://www.healthyplacesindex.org/faqs  

Snedker, K. A., & Herting, J. R. (2008). The Spatial Context of Adolescent Alcohol Use*. In Y. F. Thomas, D. Richardson, & I. Cheung (Eds.), Geography and Drug Addiction (pp. 43–63). Springer Netherlands. https://doi.org/10.1007/978-1-4020-8509-3_4  

Tabb, L. P., Fillmore, C., & Melly, S. (2018). Location, location, location: Assessing the spatial patterning between marijuana licenses, alcohol outlets and neighborhood characteristics within Washington state. Drug and Alcohol Dependence, 185, 214–218. https://doi.org/10.1016/j.drugalcdep.2018.01.004 

Trangenstein, P. J., Gray, C., Rossheim, M. E., Sadler, R., & Jernigan, D. H. (2020). Alcohol Outlet Clusters and Population Disparities. Journal of Urban Health, 97(1), 123–136. https://doi.org/10.1007/s11524-019-00372-2

#**Data Dictionary: Healthy Places Index 3.0 and Alcohol Outlet Dashboard**
####**All quotes aquired from the data dictionary provided in file obtained from HPI 3.0 data file provided during communications with Bodenreider(2023)**



GEOID: "10-digit census tract code (state+county+tractID)"

name: "Full tract name"

pop: "Total population of census tract (ACS 2015-2019)"

hpi: "Total HPI score"

hpi_pctile: "Percentile ranking of HPI score"

hpi_quarti: "Quartile of HPI score"

LEB: "Estimate of life expectancy at birth (CDC USALEEP 2015)"

LEB_pctile: "Percentile ranking of LEB"

economic: "Economic policy action area score, summed Z-scores of individual policy action area variables"

education: "Education score, summed Z-scores of individual policy action area variables"

insurance: "Healthcare Access policy action area score, z-score of insurance variable"

housing: "Housing policy action area score, summed Z-scores of individual policy action area variables"

neighborho: "Neighborhood policy action area score, summed Z-scores of individual policy action area variables"

social: "Social policy action area score, summed Z-scores of individual policy action area variables"

clean_envi: "Clean Environment policy action area score, summed Z-scores of individual policy action area variables"

transportation: "Transportation policy action area score, summed Z-scores of individual policy action area variables"

abovepover: "Percent of the population with an income exceeding 200% of federal poverty level"

automobile: "Percentage of households with access to an automobile"

bachelorse: "Percentage of population over age 25 with a bachelor's education or higher"

censusresp: "Percent of 2020 decennial households who completed census forms online, by mail, or by phone"

commute: "Percentage of workers (16 years and older) who commute to work by transit, walking, or cycling"

dieselpm: "Spatial distribution of gridded diesel PM emissions from on-road and non-road sources in 2016"

employed: "Percentage of population aged 20-64 who are employed"

h20contam: "CalEnviroScreen 4.0 drinking water contaminant index for selected contaminants, 2011 to 2019"

homeowners: "Percentage of occupied housing units occupied by property owners"

insured: "Percentage of adults aged 19 to 64 years with health insurance coverage"

ownsevere: "Percentage of low-income homeowners paying more than 50% of income on housing costs"

ozone: "Mean of summer months (May-October) of the daily maximum 8-hour ozone concentration (ppm), averaged over three years (2016 to 2018)"

parkaccess: "Percentage of the population living within a half-mile of a park, beach, or open space greater than 1 acre."

ownsevere: "The percentage of households in a neighborhood that experience severe housing cost burden, meaning they spend more than 50% of their income on housing expenses."

rentsevere: "The percentage of renters in a neighborhood that experience severe housing cost burden, meaning they spend more than 50% of their income on rent and utilities."

percapitai: "The per capita income in a neighborhood, which is the average income earned by each resident."

pm25: "The concentration of fine particulate matter with a diameter of 2.5 micrometers or less in the air, which can have negative impacts on health."

treecanopy: "The percentage of land in a neighborhood that is covered by tree canopy, which can provide benefits such as temperature regulation and air quality improvement."

uncrowded: "The percentage of households in a neighborhood that have fewer than one person per room in their housing unit, indicating less overcrowding."
voting: "The percentage of eligible voters in a neighborhood who cast a ballot in a given election."

latino_pct_2: "The percentage of residents in a neighborhood who identify as Latino or Hispanic."

white_pct: "The percentage of residents in a neighborhood who identify as White."

black_pct: "The percentage of residents in a neighborhood who identify as Black or African American."

asian_pct: "The percentage of residents in a neighborhood who identify as Asian."

multiple_p: "The percentage of residents in a neighborhood who identify with more than one race."

NativeAm_p: "The percentage of residents in a neighborhood who identify as Native American or Alaska Native."

PacificIsl: "The percentage of residents in a neighborhood who identify as Native Hawaiian or Pacific Islander."

other_pct: "The percentage of residents in a neighborhood who identify as a race or ethnicity other than those listed above."

geometry: "The spatial information that defines the boundaries and shape of a neighborhood, typically represented as a set of coordinates or shapes on a map."
"""

# Installation of necessary modules 
!pip install ipywidgets contextily geopandas geoplot
import ipywidgets as widgets
from IPython.display import display, clear_output
from matplotlib import pyplot as plt
import matplotlib as mpl
import pandas as pd
import geopandas as gpd
import numpy as np 
import requests
import geoplot as gplt
import contextily as cx
import seaborn as sns
import folium
from geopy.geocoders import Nominatim

# Code for HPI Dashboard
class HPIdashboard:
  def __init__(self): # class constructor method that sets up the instance properties and initiates class methods  
    self.outlet_locations = gpd.read_file('geocoded_outlets_cleaned.gpkg') 
    hpi_data = gpd.read_file('hpi_data.gpkg')
    hpi_data['name'] = hpi_data['NAME'].astype(float) 
    hpi_data = hpi_data[["GEOID","name", "pop", "hpi", "hpi_pctile","hpi_quarti","LEB", "LEB_pctile","economic","education","insurance","housing","neighborho",
                         "social","clean_envi","transporta","abovepover","automobile","bachelorse","censusresp","commute","dieselpm",
                         "employed","h20contam","homeowners","insured","ozone","parkaccess","ownsevere","rentsevere",
                         "percapitai","pm25","treecanopy","uncrowded", "voting","latino_pct_2","white_pct","black_pct","asian_pct","multiple_p",
                         "NativeAm_p","PacificIsl","other_pct","geometry"]]
    outlets_data = self.outlet_locations[["X","Y","Lic_Type","name","USER_Busin"]] 
    HPI_outlets_joined = pd.merge(hpi_data, outlets_data, on='name', how='left')  
    HPI_outlets_joined["outlet_count"] = 1 
    HPI_outlets_joined = HPI_outlets_joined.groupby('name').agg({'outlet_count':'sum'}) # aggregate 
    self.HPI_outlets_joined = hpi_data.merge(HPI_outlets_joined, on='name') 
 
    self.scatterplot_viz = widgets.Output() # tab variables - assigns widget outputs for each tab's contents
    self.kde_map = widgets.Output()  
    self.choropleth_map = widgets.Output() 
    self.regression_plot = widgets.Output() 
    self.folium_map = widgets.Output() 

    self.columns = self.HPI_outlets_joined.loc[:, ~self.HPI_outlets_joined.columns.isin(['GEOID', 'name', 'geometry'])] # columns for dropdowns 

    # indicator dropdowns and generate buttons for tabs
    self.indicator1_dropdown = widgets.Dropdown( # provides column names of the HPI_outlets_joined geodataframe
        options=self.columns, 
        description='HPI Indicator:', 
        disabled=False,
        style={'description_width': 'auto'},
        layout=widgets.Layout(width="auto"))
    
    self.indicator2_dropdown = widgets.Dropdown( # provides column names of the HPI_outlets_joined geodataframe
        options=self.columns,  
        description='HPI Indicator:', 
        disabled=False,
        style={'description_width': 'auto'},
        layout=widgets.Layout(width="auto"))
    
    self.generate_button = widgets.Button( # widget button to initiate scatterplot and regression plot visualizations 
        description='Generate', 
        disabled=False,
        button_style='',
        tooltip='Click me to generate visualizations',
        icon='check',
        style={'description_width': 'auto'},
        layout=widgets.Layout(width="auto"))
    
    self.input_address = widgets.Text( # widget text input for folium map address
        value=str(''),
        placeholder='Type something',
        description='Address:',
        disabled=False)
    
    self.input_distance = widgets.Text( # widget text input for folium map distance buffer
        value='',
        placeholder='Type something',
        description='Radius distance(meters):',
        disabled=False,
        style= {'description_width': 'initial'})

    self.search_button = widgets.Button( # widget button for generatiion of folium map
        description='Search',
        disabled=False,
        button_style='',
        tooltip='Click me to start search',
        icon='check',
        style={'description_width': 'auto'},
        layout=widgets.Layout(width="auto"))
     
    self.outlet_dropdown = widgets.Dropdown( # outlet dropdown KDE - provides column names of the HPI_outlets_joined geodataframe
      options=[('Bars (On-Site Consumption)', [40,42,48,61]),
               ('Restaurants (On-Site Consumption)', [41,47,75]),   
               ('Beer & Wine (Packaged, Off-Site Consumption)', [20]),
               ('Beer, Wine, & Spirits (Packaged, Off-Site Consumption)', [21]),
               ('All Outlet Types', [20,21,40,42,48,61,41,47,75])],
      description='Outlet Type:',
      disabled=False)
    
    self.generate2_button = widgets.Button( # widget button for KDE generation
        description='Generate',
        disabled=False,
        button_style='',
        tooltip='Click me to generate visualizations',
        icon='check',
        style={'description_width': 'auto'},
        layout=widgets.Layout(width="auto"))
    
    self.generate3_button = widgets.Button( # widget button for choropleth generation
        description='Generate',
        disabled=False,
        button_style='',
        tooltip='Click me to generate visualizations',
        icon='check',
        style={'description_width': 'auto'},
        layout=widgets.Layout(width="auto"))

    self.widget_creation() # initiate the widget and dashboard creation methods of the class
    self.dashboard_creation() 
    
  def widget_creation(self): # class method to initiate the creations of widgets needed for tabs 
    self.create_scatterplot() 
    self.create_kde()
    self.create_choropleth()
    self.create_regression()
    self.create_folium()

  def dashboard_creation(self): # class method to initiate the creations of dashboard to host tabs 
    children = [self.scatterplot_tab, self.kde_tab, self.choropleth_tab, self.regression_tab, self.interactivemap_tab] # assign tab children as layout generated from respective methods of class
    tab = widgets.Tab() 
    tab.children = children 
    tab.set_title(0, 'Scatterplot') 
    tab.set_title(1, 'KDE Map')
    tab.set_title(2, 'Choropleth Map')
    tab.set_title(3, 'Regression Plot')
    tab.set_title(4, 'Interactive Map')
    display(tab) 

  def create_scatterplot(self): # class method called in widget_creation method to generate scatterplot tab contents
    def scatter_changes(indicator1='',indicator2=''): # method to make changes within tab 
      self.scatterplot_viz.clear_output() 
      with self.scatterplot_viz: # use widget.Output() assignment from __init__ method to specify scatterplot tab contents
        fig, ax = plt.subplots(figsize=(16,16)) 
        ax.set_title('Scatterplot: {} and {} in Los Angeles County, California'.format(indicator1,indicator2),fontsize=16)
        self.HPI_outlets_joined.plot.scatter(
            ax=ax,
            x=indicator1, 
            y=indicator2, 
            c='outlet_count',
            cmap='autumn_r',
            xlabel=indicator1, 
            ylabel=indicator2)
        plt.show() 
    items = [self.indicator1_dropdown,self.indicator2_dropdown,self.generate_button,self.scatterplot_viz] # list items to be included in tab
    hbox = widgets.HBox([items[0],items[1],items[2]]) # widgets horozontal box to host the dropdowns and button 
    self.scatterplot_tab = widgets.VBox([hbox,items[3]]) # widgets vertical box to host HBox created above and widgets.Output() variable 

    def on_click(b): # widgets events methods to initiate scatter_changes method when generate button is clicked
      scatter_changes(self.indicator1_dropdown.value,self.indicator2_dropdown.value) 
    
    self.generate_button.on_click(on_click) # use ipywidgets event function to initiate generation of updated tabs

  def create_kde(self): # class method called in widget_creation method to generate KDE tab contents
    def kde_changes(outlet='',label=''): # method to make changes within tab 
      self.kde_map.clear_output()
      with self.kde_map:
        fig, ax = plt.subplots(figsize=(16,16))
        ax.set_title('Kernel Density Map of {} Alcohol Outlets in Los Angeles County, California'.format(label),fontsize=18)
        gplt.kdeplot(
            self.outlet_locations[self.outlet_locations['Lic_Type'].isin(outlet)], # filters for only locations matching outlet dropdown selection
            ax=ax,
            fill=True,
            cmap='OrRd') 
        gplt.polyplot(self.HPI_outlets_joined.explode(index_parts=True), zorder=1, ax=ax)
        cx.add_basemap(ax,crs=4326,source=cx.providers.CartoDB.PositronNoLabels)
        plt.show()
    items = [self.outlet_dropdown,self.generate2_button,self.kde_map] 
    hbox = widgets.HBox([items[0],items[1]])
    self.kde_tab = widgets.VBox([hbox,items[2]])

    def on_click_kde(b): # widgets events methods to initiate kde_changes method when generate button created in __init__ method is clicked
      kde_changes(self.outlet_dropdown.value,self.outlet_dropdown.label) # pass the dropdown selections to the kde_changes method

    self.generate2_button.on_click(on_click_kde) # use ipywidgets event function to initiate generation of updated tabs

  def create_choropleth(self): # class method called in widget_creation method to generate choropleth tab contents
    def choropleth_changes(indicator1=''): # method to make changes within tab 
      self.choropleth_map.clear_output()
      with self.choropleth_map:
        fig, ax = plt.subplots(figsize=(16,16)) 
        ax.set_title('Choropleth Map of {} in Los Angeles County Census Tracts'.format(indicator1),fontsize=18)
        ax.set_axis_off()
        self.HPI_outlets_joined.plot(
            ax=ax,
            column=indicator1,
            legend_kwds={'loc': 'lower right', 'fontsize':14, 'title':'{}'.format(indicator1), 'title_fontsize':16, 'facecolor':'gray'},
            cmap='OrRd',
            scheme='natural_breaks',
            legend=True,
            edgecolor='black',
            linewidth=0.4)
        cx.add_basemap(ax,crs=4326,source=cx.providers.CartoDB.PositronNoLabels)
        plt.show()
    items = [self.indicator1_dropdown,self.generate3_button,self.choropleth_map]
    hbox = widgets.HBox([items[0],items[1]])
    self.choropleth_tab = widgets.VBox([hbox,items[2]])

    def on_click_choropleth(b): # widgets events methods to initiate choropleth_changes method when generate button is clicked
      choropleth_changes(self.indicator1_dropdown.value) # pass the indicator selections to the choropleth_changes method

    self.generate3_button.on_click(on_click_choropleth) # use ipywidgets event function to initiate generation of updated tabs

  def create_regression(self): # class method called in widget_creation method to generate regression tab contents
    def regression_changes(indicator1='',indicator2=''): # method to make changes within tab for regression visualization
      self.regression_plot.clear_output()
      with self.regression_plot:
        fig, ax = plt.subplots(figsize=(15,15))
        ax.set_title('{} vs {} in Los Angeles County Census Tracts'.format(indicator1,indicator2),fontsize=16)
        sns.regplot(
            x=self.HPI_outlets_joined[indicator1], 
            y=self.HPI_outlets_joined[indicator2],
            scatter_kws = {"color": "black", "alpha": 0.5},
            line_kws = {"color": "red"}) 
        plt.show()
    items = [self.indicator1_dropdown,self.indicator2_dropdown,self.generate_button,self.regression_plot]
    hbox = widgets.HBox([items[0],items[1],items[2]])
    self.regression_tab = widgets.VBox([hbox,items[3]])

    def on_click(b): # widgets events methods to initiate regression_changes method when generate button is clicked
      regression_changes(self.indicator1_dropdown.value,self.indicator2_dropdown.value) # pass the indicator selections to the regression_changes method
    
    self.generate_button.on_click(on_click) # use ipywidgets event function to initiate generation of updated tabs

  def create_folium(self): # class method called in widget_creation method to generate folium tab contents
    def folium_changes(address='',distance='',indicator1=''): # method to make changes within tab for folium visualization
      self.address = address
      self.distance = float(distance)
      self.folium_map.clear_output()
      self.geocode() # call geocode and buffer class methods 
      self.buffer()
      with self.folium_map:
        if self.distance <= 1609.34: # increase zoom level for buffer distances smaller than 1609.34 meters
          zoom = 13 + int(round((self.distance/1000), 0))
        else:
          zoom = 13
        map = folium.Map(location=[self.lat,self.lon], zoom_start=zoom, tiles="cartodb positron no labels") # create folium map with location as input address coordinates
        for i, row in self.outlets_in_buffer.iterrows(): # iterate rows to generate markets assigning color, type_name, and icon based on Lic_Type column
          coords = [row.geometry.y, row.geometry.x]
          lic_type = row['Lic_Type']
          if lic_type in [40, 42, 48, 61]:
            type_color = "red"
            type_name = 'Bars (On-Site Consumption)'
            icon_type = 'glass'
          elif lic_type in [41, 47, 75]:
            type_color = "orange"
            type_name = 'Restaurants (On-Site Consumption)'
            icon_type = 'cutlery'
          elif lic_type == 20:
            type_color = "lightred"
            type_name = 'Beer & Wine (Packaged, Off-Site Consumption)'
            icon_type = 'shopping-cart'
          elif lic_type == 21:
            type_color = "darkred"
            type_name = 'Beer, Wine, & Spirits (Packaged, Off-Site Consumption)'
            icon_type = 'shopping-cart'
          map.add_child(
            folium.Marker(
            location=coords,
            popup="Business: " + str(row['USER_Busin']) + "<br>" +
                          "Address: " + str(row['Place_addr']) + "<br>" +
                          "License Type: " + str(type_name),
            icon=folium.Icon(color=type_color, icon=icon_type),))
        map.add_child( # add input address coordinates as marker 
            folium.Marker(
            location=[self.lat,self.lon],
            popup="Address: " + address,
            icon=folium.Icon(color='gray'),))
        hpidata_layer = folium.Choropleth( # add choropleth layer of selected indicator
            geo_data=self.HPI_outlets_joined,
            data=self.HPI_outlets_joined,
            columns=['name', indicator1, 'pop', 'outlet_count'],
            key_on='feature.properties.name',
            fill_color='OrRd',
            fill_opacity=0.7,
            line_opacity=0.2,
            legend_name='{} in Los Angeles County Census Tracts'.format(indicator1)).add_to(map)
        tooltip = folium.GeoJsonTooltip(['name','pop', indicator1, 'outlet_count']).add_to(hpidata_layer.geojson) # tooltip for choropleth layer
        display(map) 
        
    items = [self.input_address,self.input_distance,self.indicator1_dropdown,self.search_button,self.folium_map]
    hbox = widgets.HBox([items[0],items[1],items[2],items[3]])
    self.interactivemap_tab = widgets.VBox([hbox,items[4]])

    def on_click_search(b): # widgets events methods to initiate folium_changes method when generate button created in __init__ method is clicked
      folium_changes(self.input_address.value,self.input_distance.value,self.indicator1_dropdown.value) # pass the indicator selections to the folium_changes method
      
    self.search_button.on_click(on_click_search) # use ipywidgets event function to initiate generation of updated tabs

  def geocode(self): # geocode class method used in folium tab output 
    geocoder = Nominatim(user_agent='hpi_outlets_analysis')
    geocoded = geocoder.geocode(self.address) # user input address
    self.lat = geocoded.latitude
    self.lon = geocoded.longitude
    lat_lon_df = pd.DataFrame({'input':[self.address],'Lat':[self.lat],'Lon':[self.lon]})
    self.lat_long_gdf = gpd.GeoDataFrame(lat_lon_df, geometry=gpd.points_from_xy(lat_lon_df.Lon, lat_lon_df.Lat),crs=4326)

  def buffer(self): # buffer class method used in folium tab output 
    projected_coords = self.lat_long_gdf.to_crs("EPSG:3857")
    address_buff = projected_coords.buffer(self.distance) # user input distance 
    projected_address_buff = address_buff.to_crs(4326)
    address_buff_gdf = gpd.GeoDataFrame(projected_address_buff,geometry=projected_address_buff,crs=4326)
    self.outlets_in_buffer = gpd.sjoin(self.outlet_locations, address_buff_gdf, predicate='within') # join to generate geodataframe of locations in buffer

start = HPIdashboard() # create instance to initiate the class